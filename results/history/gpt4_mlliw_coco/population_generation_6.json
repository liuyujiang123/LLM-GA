{
     "algorithm": "The algorithm uses a non-linear gradient scaling approach with adaptive noise injection and dynamic step size adjustment to effectively craft adversarial examples by iteratively refining perturbations.",
     "code": "import torch\nimport torch.nn as nn\nfrom torch.autograd import Variable\n\n# {The algorithm uses a non-linear gradient scaling approach with adaptive noise injection and dynamic step size adjustment to effectively craft adversarial examples by iteratively refining perturbations.}\n\ndef gen_adv_examples(org_img, target_model, target):\n    maxiter = 30\n    epsilon = 0.3\n    alpha = 0.002\n    decay_factor = 0.8\n    noise_factor = 0.02\n    loss_func = nn.BCELoss(reduction='mean')\n\n    # Random Initialization within epsilon-ball\n    adv_img = org_img + torch.empty_like(org_img).uniform_(-epsilon, epsilon)\n    adv_img = torch.clamp(adv_img, 0, 1)\n    adv_img = Variable(adv_img.data, requires_grad=True)\n\n    # Momentum and non-linear gradient scaling\n    momentum = torch.zeros_like(org_img)\n\n    for i in range(maxiter):\n        output = target_model(adv_img)\n        loss = -loss_func(output, target.float())\n\n        if adv_img.grad is not None:\n            adv_img.grad.data.zero_()\n\n        loss.backward()\n\n        # Non-linear scaling of gradients and noise injection\n        grad = adv_img.grad / (torch.norm(adv_img.grad, p=2, dim=[1,2,3], keepdim=True) + 1e-8)\n        grad = torch.tanh(grad) * (1 + noise_factor * torch.empty_like(grad).normal_())\n        momentum = decay_factor * momentum + grad\n\n        # Dynamic step size adjustment\n        dynamic_alpha = alpha * (1 + torch.sin(torch.tensor(i / maxiter * 3.14159)))\n\n        # Update adversarial image\n        adv_img = adv_img + dynamic_alpha * momentum.sign()\n        adv_img = torch.clamp(adv_img, org_img - epsilon, org_img + epsilon)\n        adv_img = torch.clamp(adv_img, 0, 1)\n        adv_img = Variable(adv_img.data, requires_grad=True)\n\n    return adv_img",
     "objective": 205.74878,
     "other_inf": null
}