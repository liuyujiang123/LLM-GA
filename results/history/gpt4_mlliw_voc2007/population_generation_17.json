{
     "algorithm": "This algorithm applies an adaptive perturbation strategy based on cosine similarity of gradients with dynamic scaling to generate adversarial examples targeting specific labels.",
     "code": "import torch\nimport torch.nn as nn\nfrom torch.autograd import Variable\n\n# {This algorithm applies an adaptive perturbation strategy based on cosine similarity of gradients with dynamic scaling to generate adversarial examples targeting specific labels.}\n\ndef gen_adv_examples(org_img, target_model, target):\n    maxiter = 30\n    epsilon = 0.3\n    alpha = 0.002\n    momentum_factor = 0.9\n    decay_factor = 0.95\n    loss_func = nn.BCELoss(reduction='mean')\n    \n    adv_img = Variable(org_img.data, requires_grad=True)\n    accumulated_grad = torch.zeros_like(org_img)\n    \n    for _ in range(maxiter):\n        output = target_model(adv_img)\n        true_label = output.clone()\n        true_label[true_label >= 0.5] = 1\n        true_label[true_label < 0.5] = 0\n        loss = -loss_func(output, target.float())\n        \n        target_model.zero_grad()\n        if adv_img.grad is not None:\n            adv_img.grad.data.zero_()\n        \n        loss.backward()\n        \n        grad = adv_img.grad / (torch.norm(adv_img.grad, p=2) + 1e-10)\n        if _ > 0:\n            cosine_similarity = torch.sum(accumulated_grad * grad) / (torch.norm(accumulated_grad) * torch.norm(grad) + 1e-10)\n            alpha_cosine = alpha * (1 + cosine_similarity).clamp(min=0)\n        else:\n            alpha_cosine = alpha\n        \n        accumulated_grad = momentum_factor * accumulated_grad + grad\n        \n        perturbation = alpha_cosine * accumulated_grad.sign() * (1 - decay_factor * loss.item())\n        adv_img = adv_img + perturbation\n        adv_img = torch.clamp(adv_img, org_img - epsilon, org_img + epsilon)\n        adv_img = torch.clamp(adv_img, 0, 1)\n        adv_img = Variable(adv_img.data, requires_grad=True)\n    \n    return adv_img",
     "objective": 332.68948,
     "other_inf": null
}